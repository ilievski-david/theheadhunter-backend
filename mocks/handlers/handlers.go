// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ilievski-david/theheadhunter-backend/handlers (interfaces: Handler)

// Package handlers is a generated GoMock package.
package handlers

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// AddColor mocks base method.
func (m *MockHandler) AddColor(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddColor", arg0)
}

// AddColor indicates an expected call of AddColor.
func (mr *MockHandlerMockRecorder) AddColor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddColor", reflect.TypeOf((*MockHandler)(nil).AddColor), arg0)
}

// GetColors mocks base method.
func (m *MockHandler) GetColors(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetColors", arg0)
}

// GetColors indicates an expected call of GetColors.
func (mr *MockHandlerMockRecorder) GetColors(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColors", reflect.TypeOf((*MockHandler)(nil).GetColors), arg0)
}

// RemoveColor mocks base method.
func (m *MockHandler) RemoveColor(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveColor", arg0)
}

// RemoveColor indicates an expected call of RemoveColor.
func (mr *MockHandlerMockRecorder) RemoveColor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveColor", reflect.TypeOf((*MockHandler)(nil).RemoveColor), arg0)
}
