// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ilievski-david/theheadhunter-backend/crud (interfaces: Database)

// Package crud is a generated GoMock package.
package crud

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/ilievski-david/theheadhunter-backend/models"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// DeleteColor mocks base method.
func (m *MockDatabase) DeleteColor(arg0 models.ColorRemove) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteColor", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteColor indicates an expected call of DeleteColor.
func (mr *MockDatabaseMockRecorder) DeleteColor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteColor", reflect.TypeOf((*MockDatabase)(nil).DeleteColor), arg0)
}

// IgnoreOrInsertUser mocks base method.
func (m *MockDatabase) IgnoreOrInsertUser(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IgnoreOrInsertUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// IgnoreOrInsertUser indicates an expected call of IgnoreOrInsertUser.
func (mr *MockDatabaseMockRecorder) IgnoreOrInsertUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgnoreOrInsertUser", reflect.TypeOf((*MockDatabase)(nil).IgnoreOrInsertUser), arg0)
}

// InsertColor mocks base method.
func (m *MockDatabase) InsertColor(arg0 models.ColorPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertColor", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertColor indicates an expected call of InsertColor.
func (mr *MockDatabaseMockRecorder) InsertColor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertColor", reflect.TypeOf((*MockDatabase)(nil).InsertColor), arg0)
}

// QueryColors mocks base method.
func (m *MockDatabase) QueryColors(arg0 string) ([]models.Color, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryColors", arg0)
	ret0, _ := ret[0].([]models.Color)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryColors indicates an expected call of QueryColors.
func (mr *MockDatabaseMockRecorder) QueryColors(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryColors", reflect.TypeOf((*MockDatabase)(nil).QueryColors), arg0)
}
